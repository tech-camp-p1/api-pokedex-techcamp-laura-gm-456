CODE EXPLANATION 

 

POKEMON CARDS 

Global Variables and Configuration 

const poke_container = document.getElementById('poke-container'); 

const pokemon_count = 150; 

const colors = { 

  fire: '#FDDFDF', 

  grass: '#DEFDE0', 

  electric: '#FCF7DE', 

  water: '#DEF3FD', 

  ground: '#f4e7da', 

  rock: '#d5d5d4', 

  fairy: '#fceaff', 

  poison: '#98d7a5', 

  bug: '#f8d5a3', 

  dragon: '#97b3e6', 

  psychic: '#eaeda1', 

  flying: '#F5F5F5', 

  fighting: '#E6E0D4', 

  normal: '#F5F5F5' 

}; 

 

 

const poke_container = document.getElementById('poke-container'); 

Selects the container in the HTML (with ID poke-container) where the Pokémon cards will be displayed. 

const pokemon_count = 150; 

Specifies the total number of Pokémon to fetch (first 150 Pokémon). 

const colors = { ... }; 

Defines colors for different Pokémon types (e.g., fire, water). Each type has a specific background color for styling Pokémon cards. 

 

const main_types = Object.keys(colors); 

 

const main_types = Object.keys(colors); 

Extracts all the Pokémon types (keys) from the colors object and stores them in an array, e.g., ["fire", "grass", "electric", ...]. 

 

Fetching and Handling Pokémon 

function fetchPokemons() { 

  const requests = []; 

  for (let i = 1; i <= pokemon_count; i++) { 

    requests.push(getPokemon(i)); 

  } 

 

  Promise.all(requests) 

    .then(() => console.log('All Pokémon fetched!')) 

    .catch(error => console.error('Error fetching Pokémon:', error)); 

} 

 

function fetchPokemons() { ... } 

Fetches all Pokémon data by looping through their IDs (from 1 to pokemon_count) and sending API requests.  

Parentheses (): In this context, they are used to invoke the function, meaning the function will execute. 

const requests = []; 

An empty array to store API requests for all Pokémon. 

for (let i = 1; i <= pokemon_count; i++) {  

requests.push(getPokemon(i)); } 

Loops from 1 to 150, and for each ID, it calls getPokemon(id) to fetch a Pokémon's data. Each API request is stored in the requests array. 

1. for Loop Overview: 

A for loop is used to repeatedly execute a block of code a certain number of times. It typically has three components: 

Initialization: Starts the loop with a variable. 

Condition: Determines if the loop should continue running. 

Increment/Decrement: Changes the variable value after each iteration. 

In this case, we are using a for loop to run a set of actions based on a variable i and the pokemon_count. 

2. for (let i = 1; i <= pokemon_count; i++): 

Initialization: This part sets the loop variable i to 1. 

a. let i = 1: 

Purpose: It defines the starting point of the loop. The loop will begin with i = 1. 

b. i <= pokemon_count: 

Condition: This condition checks if the value of i is less than or equal to pokemon_count. 

As long as this condition evaluates to true, the loop will continue running. 

Once i exceeds pokemon_count, the loop stops. 

 

c. i++: 

Increment: The i++ expression increases the value of i by 1 after each iteration of the loop. 

Purpose: This ensures that the loop progresses, moving from 1 to 2, 2 to 3, and so on, until the condition i <= pokemon_count is no longer true. 

i++ is shorthand for i = i + 1. 

requests.push(getPokemon(i));: 

requests.push(...): 

push() is a method used to add an element to the end of an array. In this case, it adds the result of getPokemon(i) to the requests array. 

requests is an array, and this method is used to store each request in the array for later use. 

getPokemon(i): 

This is a function call that fetches data for the Pokémon corresponding to the value of i. 

The function getPokemon(i) is likely an asynchronous function (such as a fetch or axios call) that retrieves information about a Pokémon by its index (i). 

For each iteration, getPokemon(i) is called with a different value of i (starting from 1 and going up to pokemon_count). 

 

 

Promise.all(requests).then(...).catch(...); 

Waits for all the requests in the requests array to finish: 

If successful, logs "All Pokémon fetched!" 

If an error occurs, logs "Error fetching Pokémon". 

 

function getPokemon(id) { 

  const url = `https://pokeapi.co/api/v2/pokemon/${id}`; 

  axios.get(url) 

    .then(response => { 

      createPokemonCard(response.data); 

    }) 

    .catch(error => { 

      console.error(`Error fetching Pokémon with ID ${id}:`, error); 

    }); 

} 

 

function getPokemon(id) { ... } 

Fetches data for a single Pokémon using its ID. 

const url = 'https://pokeapi.co/api/v2/pokemon/' + id; 

Constructs the API URL for the Pokémon with the given ID  

(e.g., https://pokeapi.co/api/v2/pokemon/1 for Bulbasaur). 

axios.get(url).then(...).catch(...); 

Sends a GET request to the API to fetch the Pokémon's data: 

If successful, calls createPokemonCard(response.data) to create a card for the Pokémon. 

If an error occurs, logs an error message for that Pokémon. 

 

Creating the Pokémon Card 

function createPokemonCard(pokemon) { 

  const pokemonEl = document.createElement('div'); 

  pokemonEl.classList.add('pokemon'); 

 

  const name = pokemon.name[0].toUpperCase() + pokemon.name.slice(1); 

  const id = pokemon.id.toString().padStart(3, '0'); 

 

  const poke_types = pokemon.types.map(type => type.type.name); 

  const type = main_types.find(type => poke_types.indexOf(type) > -1); 

  const color = colors[type]; 

 

  pokemonEl.style.backgroundColor = color; 

 

  const pokemonInnerHTML = ` 

    <div class="img-container"> 

        <img src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.id}.png" alt="${name}"> 

    </div> 

    <div class="info"> 

        <span class="number">#${id}</span> 

        <h3 class="name">${name}</h3> 

        <small class="type"> Type: <span>${type}</span></small> 

    </div>`; 

 

  pokemonEl.innerHTML = pokemonInnerHTML; 

 

  poke_container.appendChild(pokemonEl); 

} 

 

function createPokemonCard(pokemon) { ... } 

Creates an individual Pokémon card and adds it to the poke_container. 

const pokemonEl = document.createElement('div'); 

Creates a new <div> element for the Pokémon card. 

pokemonEl.classList.add('pokemon'); 

Adds a CSS class pokemon to style the card. 

const name = pokemon.name[0].toUpperCase() + pokemon.name.slice(1); 

Capitalizes the Pokémon's name (e.g., bulbasaur → Bulbasaur). 

-pokemon.name[0] This retrieves the first character of the string. Example: For "bulbasaur", pokemon.name[0] is "b". 

-.toUpperCase() This method converts a string to uppercase. 

Example: "b".toUpperCase() results in "B". 

 

-pokemon.name.slice(1) The .slice() method extracts a portion of a string, starting from the specified index. pokemon.name.slice(1) means "take everything from the second character to the end of the string." 

Example: "bulbasaur".slice(1) results in "ulbasaur". 

. Concatenating Strings:  The + operator concatenates (joins) two strings together. Here, we combine the capitalized first letter (pokemon.name[0].toUpperCase()) with the rest of the string (pokemon.name.slice(1)). 

const id = pokemon.id.toString().padStart(3, '0'); 

Formats the Pokémon's ID with leading zeros to make it 3 digits (e.g., 1 → 001). 

-pokemon.id This accesses the id property of the pokemon object. Example: If pokemon.id is 1, we are working with the number 1. 

-.toString() This method converts a number into a string. This is necessary because the next method (padStart) works only on strings. Example: 1.toString() results in "1". 

-.padStart(3, '0') The .padStart() method adds characters to the beginning (left side) of a string until it reaches the specified length. 

Syntax: string.padStart(targetLength, padString) 

targetLength: The desired length of the final string. 

padString: The character(s) to pad with (e.g., '0'). 

Example: 

"1".padStart(3, '0') → Adds two '0' characters to the left to make the string "001". 

"12".padStart(3, '0') → Adds one '0' to the left to make the string "012". 

"123".padStart(3, '0') → Does nothing because the string is already 3 characters long. 

 

These lines are often used to ensure Pokémon names and IDs are displayed in a clean and consistent format in user interfaces or applications. 

 

const poke_types = pokemon.types.map(...); Extracts all the types for the Pokémon (e.g., fire, flying), array containing information about the Pokémon’s types. Each element in this array represents one type. 

.map() Method 

The .map() method is used to create a new array by applying a transformation to each element in the original array.  

Syntax: array.map(element => transformation) 

 

type => type.type.name 

This is the callback function passed to .map() to specify the transformation. 

For each element (type) in pokemon.types, it extracts type.type.name. 

In the example above: 

For the first element, type.type.name is "grass". 

For the second element, type.type.name is "poison". 

 

const type = main_types.find(...); Finds the main type of the Pokémon by matching its types with main_types. 

const type = main_types.find(type => poke_types.indexOf(type) > -1); 
-main_types = array of predefined "main" types. For example: 

main_types = ["fire", "water", "grass", "electric"]; 
 

-find() Method: The .find() method returns the first element in the array that satisfies the given condition. 

Syntax: array.find(element => condition); 

Here, it’s used to find the first type in main_types that exists in the poke_types array. 

 

-poke_types.indexOf(type) > -1: The indexOf() method checks if a specific value exists in an array: 

If the value is found, indexOf() returns its position (0 or higher). 

If the value is not found, indexOf() returns -1. 

The condition poke_types.indexOf(type) > -1 checks: 

Is type (from main_types) present in poke_types? 

How It Works: 

The .find() method iterates over each type in main_types: 

If "fire" is not in poke_types, it moves to "water", and so on. 

When it finds the first match (e.g., "grass" in poke_types), it stops and returns that type. 

Result: 

If poke_types = ["grass", "poison"] and main_types = ["fire", "water", "grass", "electric"], the first matching type is "grass". 

type = "grass". 

 

const color = colors[type]; 

Gets the background color for the Pokémon's type from the colors object. pokemonEl.style.backgroundColor = color; 

Sets the card's background color based on the Pokémon's type 

HTML Content (pokemonInnerHTML): 

Dynamically creates the card's HTML structure: 

Shows the Pokémon's image, name, ID, and type. 

pokemonEl.innerHTML = pokemonInnerHTML; 

Inserts the card's HTML content into the pokemonEl element. 

poke_container.appendChild(pokemonEl); 

Adds the completed Pokémon card to the poke_container. 

 

Fetching and Displaying Pokémon 

 

fetchPokemons(); 

 

 

fetchPokemons(); 

Calls the fetchPokemons function to start fetching and displaying the Pokémon cards. 

 

Flow Summary 

fetchPokemons() starts fetching 150 Pokémon using getPokemon(id). 

Each Pokémon's data is fetched from the API, and createPokemonCard is called to create its card. 

The card is styled based on its type and added to the poke_container. 

All cards are displayed on the webpage! 

 
